plugins {
    id "java"
    id "scala"
    id "jetty"
    id "war"
    id "com.github.maiflai.scalatest" version "0.14"
    id "org.scoverage" version "2.1.0"
    id "com.github.kt3k.coveralls" version "2.4.0x"
    id "org.ajoberstar.github-pages" version "1.3.2"
}

repositories {
    mavenCentral()
    jcenter()
}

version = "0.4.0"

dependencies {
    compile "org.scala-lang:scala-library:${scalaVersion}.+"
    compile "javax.ws.rs:javax.ws.rs-api:2+"
    compile "org.eclipse.jetty.aggregate:jetty-all:9+"
    compile "org.glassfish.jersey.containers:jersey-container-servlet:${jerseyVersion}"
    compile "org.glassfish.jersey.media:jersey-media-json-jackson:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    compile "com.fasterxml.jackson.module:jackson-module-scala_${scalaVersion}:${jacksonVersion}"
    compile "com.datastax.cassandra:cassandra-driver-core:3+"
    compile "com.google.inject:guice:${guiceVersion}"
    compile "net.codingwell:scala-guice_${scalaVersion}:${guiceVersion}"
    compile "com.github.racc:typesafeconfig-guice:+"
    compile "org.yaml:snakeyaml:1.+"
    compile "org.slf4j:slf4j-api:1+"
    compile "org.reflections:reflections:+"
    compile "ch.qos.logback:logback-classic:1+"

    // Test-only dependencies
    testCompile "org.scalatest:scalatest_${scalaVersion}:3+"
    testCompile "org.mockito:mockito-core:2+"
    testCompile "org.glassfish.jersey.test-framework:jersey-test-framework-core:${jerseyVersion}"
    testCompile "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:${jerseyVersion}"

    testRuntime "org.pegdown:pegdown:+"

    scoverage "org.scoverage:scalac-scoverage-plugin_${scalaVersion}:${scalacScoverageVersion}"
    scoverage "org.scoverage:scalac-scoverage-runtime_${scalaVersion}:${scalacScoverageVersion}"
}

// This task creates a version.properties file so that the version of the
// project can be read at runtime
task createVersionProperties(dependsOn: processResources) {
    doLast {
        Properties p = new Properties()
        p['version'] = project.version.toString()
        new File("$buildDir/resources/main/com/netscout/aion2/version.properties").withWriter { w ->
            p.store w, null
        }
    }
}

classes {
    dependsOn createVersionProperties
}

compileScala {
    scalaCompileOptions.additionalParameters = ["-feature"]
}

// By default, the jetty plugin would run the servlet under the path
// "/aion2", whereas since this will most often be deployed as a standalone
// application rather than part of a webapp, the default is to run this servlet
// at the root of the server
jettyRunWar.contextPath = "/"

// Add tasks to upload coverage information to coveralls
def scoverageCoberturaPath = "${buildDir}/reports/scoverage/cobertura.xml"
coveralls {
    coberturaReportPath = scoverageCoberturaPath
}

task scoverageCopyVersionProperties(type: Copy, dependsOn: createVersionProperties) {
    from "$buildDir/resources/main/com/netscout/aion2"
    include "*version.properties"
    into "$buildDir/resources/scoverage/com/netscout/aion2"
}

scoverageClasses.dependsOn scoverageCopyVersionProperties

// Documentation
githubPages {
    repoUri = "https://github.com/mcoffin/aion.git"
    pages {
        from "${buildDir}/docs/scaladoc"
    }
    credentials {
        username = "${System.env.GHPAGES_USER}"
        password = "${System.env.GHPAGES_PASS}"
    }
    deleteExistingFiles = true
}
prepareGhPages.dependsOn scaladoc
